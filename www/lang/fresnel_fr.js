'use strict';
goog.provide('Blockly.Msg.fr');
goog.require('Blockly.Msg');
///////////////////////////////////// FRESNEL /////////////////////////////////////
// Nouvelle arborescence
Blockly.Msg.CAT_ARDUINO_PIN = " - Broches/Interruptions";
Blockly.Msg.CAT_BITWISE = "Opérateurs logiques bit à bit";
Blockly.Msg.CAT_LOOPS = "Boucles ";
Blockly.Msg.CAT_ARRAY = "Tab ";
Blockly.Msg.CAT_ARDUINO_CONVERSION = "conversion de type (Cast)"

Blockly.Msg.CAT_FONCTION_AFFICHAGE = "Affichage";
Blockly.Msg.CAT_FONCTION_CAPTEURS = "Capteurs";
Blockly.Msg.CAT_FONCTION_MOTEURS = "Commande Moteurs";
Blockly.Msg.CAT_FONCTION_ENTREES = "Entrées";
Blockly.Msg.CAT_FONCTION_ARDUINO_ENTREES = "- Entrées";
Blockly.Msg.CAT_FONCTION_ENTREES_NUM = "- Entrées numériques";
Blockly.Msg.CAT_FONCTION_ENTREES_ANA = "- Entrées analogiques";
Blockly.Msg.CAT_FONCTION_ARDUINO_SORTIES = "- Sorties";
Blockly.Msg.CAT_FONCTION_SORTIES_NUM = "- Sorties numériques";
Blockly.Msg.CAT_FONCTION_SORTIES_ANA = "- Sorties PWM";
Blockly.Msg.CAT_FONCTION_SORTIES = "Sorties";
Blockly.Msg.CAT_FONCTION_BUS = "Bus de Communication / Liaisons";
Blockly.Msg.CAT_FONCTION_WIRELESS = "Communication sans fils";
Blockly.Msg.CAT_FONCTION_STOCKAGE = "Stockage Mémoire";

Blockly.Msg.CAT_FONCTION_AFFICHAGE_LED = "- LED";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_7SEG = "- 7 Segments";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD = "LCD";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD_SERIE = "- LCD Série";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD_I2C = "- LCD I2C";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD_I2C_GROVE = "- Grove";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD_I2C_ADAFRUIT = "- Adafruit";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_LCD_4BITS = "- LCD 4 Bits";
Blockly.Msg.CAT_FONCTION_AFFICHAGE_SERIE = "- Moniteur Série Arduino";

Blockly.Msg.CAT_FONCTION_CAPTEURS_TEMPERATURE = "- Température";
Blockly.Msg.CAT_FONCTION_CAPTEURS_TEMPHUM = "- Température / humidité";
Blockly.Msg.CAT_FONCTION_CAPTEURS_DHTxx = "- DHTxx";
Blockly.Msg.CAT_FONCTION_CAPTEURS_SHT1x = "- SHT1x";
Blockly.Msg.CAT_FONCTION_CAPTEURS_LUX = "- Lumière / Éclairement";
Blockly.Msg.CAT_FONCTION_CAPTEURS_VOCAL = "- Commande vocale";
Blockly.Msg.CAT_FONCTION_CAPTEURS_BATTERY = "- Monitoring batterie";
Blockly.Msg.CAT_FONCTION_CAPTEURS_BQ27441 = "- Sparkfun Battery Babysitter (BQ27441)";
Blockly.Msg.CAT_FONCTION_CAPTEURS_COLOR = "- Capteurs de couleur";
Blockly.Msg.CAT_FONCTION_CAPTEURS_LOAD = "- Capteurs de poids";
Blockly.Msg.CAT_FONCTION_Amplificateur_HX711 = "- Amplificateur de jauge HX711";

Blockly.Msg.CAT_FONCTION_MOTEURS_MOTORCC = "- Moteurs CC";
Blockly.Msg.CAT_FONCTION_MOTEURS_MOTORCC_L298 = "- L298";
Blockly.Msg.CAT_FONCTION_MOTEURS_MOTORCC_ADAFRUITV11 = "- Driver Adafruit";
Blockly.Msg.CAT_FONCTION_MOTEURS_MOTORCC_GROVEV13 = "- Driver I2C Grove";
Blockly.Msg.CAT_FONCTION_MOTEURS_MOTORCC_GROVE_MINI_DRIVER_V10 = "- Mini driver I2C Grove";
Blockly.Msg.CAT_FONCTION_MOTEURS_PAP = "- Moteurs PAP";
Blockly.Msg.CAT_FONCTION_MOTEURS_PAP_ULN2003 = "- ULN 2003";
Blockly.Msg.CAT_FONCTION_MOTEURS_PAP_ADAFRUITV11 = "- Driver Adafruit";
Blockly.Msg.CAT_FONCTION_MOTEURS_PAP_GROVEV13 = "- Driver I2C Grove";
Blockly.Msg.CAT_FONCTION_MOTEURS_PAP_GROVE_MINI_DRIVER_V10 = "- Mini driver I2C Grove";
Blockly.Msg.CAT_FONCTION_MOTEURS_SERVO = "- Servo Moteurs";
Blockly.Msg.CAT_FONCTION_MOTEURS_SERVO_ANALOG = "- Servo analogique";
Blockly.Msg.CAT_FONCTION_MOTEURS_SERVO_SCS15 = "- Servo numérique SCS15";

Blockly.Msg.CAT_FONCTION_SORTIES_PWM = "- Sortie PWM";
Blockly.Msg.CAT_FONCTION_SORTIES_BUZZER = "- Sortie Buzzer";

Blockly.Msg.CAT_FONCTION_ENTREES_CAN = "- Entrée CAN";
Blockly.Msg.CAT_FONCTION_ENTREES_KEYBOARD = "- Clavier";
Blockly.Msg.CAT_FONCTION_ENTREES_BUTTON = "- Bouton Poussoir";

Blockly.Msg.CAT_FONCTION_BUS_RS232 = "- RS232";
Blockly.Msg.CAT_FONCTION_BUS_I2C = "I2C";
Blockly.Msg.CAT_FONCTION_BUS_I2C_SOFT = "- I2C logiciel";
Blockly.Msg.CAT_FONCTION_BUS_I2C_HARD = "- I2C Hardware";
Blockly.Msg.CAT_FONCTION_BUS_SPI = "- SPI";
Blockly.Msg.CAT_FONCTION_BUS_1WIRE = "- One Wire";
Blockly.Msg.CAT_FONCTION_BUS_Ethernet = "- Ethernet";
Blockly.Msg.CAT_ETHERNET_INIT = "initialisation";
Blockly.Msg.CAT_ETHERNET_CLIENT = "client";
Blockly.Msg.CAT_ETHERNET_SERVER = "serveur";
Blockly.Msg.CAT_WIFI_INIT = "wifi esp8266"; // 30/01/2018

Blockly.Msg.CAT_FONCTION_WIRELESS_BLUTOOTH = "- Bluetooth";
Blockly.Msg.CAT_FONCTION_WIRELESS_WIFI ="- WIFI";
Blockly.Msg.CAT_FONCTION_WIRELESS_RFID ="- RFID";
Blockly.Msg.CAT_FONCTION_WIRELESS_NFC = "- NFC";
Blockly.Msg.CAT_FONCTION_WIRELESS_GPS = "- GPS";
Blockly.Msg.CAT_FONCTION_WIRELESS_GSM = "- GSM";
Blockly.Msg.CAT_FONCTION_WIRELESS_IR = "- Infra Rouge";
Blockly.Msg.CAT_FONCTION_WIRELESS_RC5 = "- RC5";
Blockly.Msg.CAT_FONCTION_WIRELESS_RF24 = "- Radio Fréquence 2.4GHz";
Blockly.Msg.CAT_FONCTION_WIRELESS_ZIGBEE = "- Zigbee";

Blockly.Msg.CAT_FONCTION_TABLE_XY = "Table XY Makeblock";
Blockly.Msg.CAT_FONCTION_TABLE_INIT = "- Init";
Blockly.Msg.CAT_FONCTION_TABLE_SWITCH = "- Capteurs de fin de course";
Blockly.Msg.CAT_FONCTION_TABLE_STEPPER = "- Moteurs pas à pas";
Blockly.Msg.CAT_FONCTION_TABLE_SERVO = "- Servomoteur";
Blockly.Msg.CAT_FONCTION_TABLE_COLOR_SENSOR = "- Capteur de couleur";

Blockly.Msg.CAT_FONCTION_STOCKAGE_EEPROM = "- EEPROM";
Blockly.Msg.CAT_FONCTION_STOCKAGE_SDCARD = "- Carte SD";
//Entrées / Sorties
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_WRITE_INPUT1 = "Mettre le PORT";
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_WRITE_INPUT2 = "à la valeur de";
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_WRITE_TOOLTIP = "écrit une valeur sur un port de sortie";
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_READ_HELPURL = "https://www.arduino.cc/en/Reference/PortManipulation";
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_READ_INPUT = "La valeur du PORT";
Blockly.Msg.ARDUINO_INOUT_PORT_DIGITAL_READ_TOOLTIP = "Lit la valeur de l'octet sur le PORT choisi";

// SPI
Blockly.Msg.SPI_INIT_TEXT = "SPI_INIT";
Blockly.Msg.SPI_INIT_SPEED = "fréquence (MHz)"
Blockly.Msg.SPI_INIT_MODE = "mode";  
Blockly.Msg.SPI_INIT_MODE_FIELDDROPDOWN = [["mode 0 (0,0)", "SPI_MODE0"], ["mode 1 (0,1)", "SPI_MODE1"], ["mode 2 (1,0)", "SPI_MODE2"], ["mode 3 (1,1)", "SPI_MODE3"]];
Blockly.Msg.SPI_INIT_BITORDER = "ordre des bits";
Blockly.Msg.SPI_INIT_BITORDER_FIELDDROPDOWN = [["MSB -> LSB", "MSBFIRST"], ["LSB -> MSB", "LSBFIRST"]];
Blockly.Msg.SPI_INIT_TOOLTIP = " configuration de la liaison SPI" ; 
Blockly.Msg.SPI_INIT_HELPURL = " " ;
Blockly.Msg.SPI_SEND_TEXT = "SPI_SEND";
Blockly.Msg.SPI_SEND_DATA = "Data :";
Blockly.Msg.SPI_SEND_FIELDDROPDOWN = [["0x","hex"], ["0b","bin"],["Décimal","dec"],["Variable","var"]];
Blockly.Msg.SPI_SEND_TOOLTIP = " envoi de la donnée par bus SPI";
Blockly.Msg.SPI_SEND_HELPURL = "";
Blockly.Msg.SPI_RECEIVE_TEXT = "SPI_RECEIVE";
Blockly.Msg.SPI_RECEIVE_TOOLTIP = "récupère une donnée";
Blockly.Msg.SPI_RECEIVE_HELPURL = "" ;
// AFFICHAGE
Blockly.Msg.GROVE_LCD_RGB_INIT_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_INIT_TEXT = "INIT Grove LCD RGB";
Blockly.Msg.GROVE_LCD_RGB_INIT_TOOLTIP = "Initialisation du LCD";
Blockly.Msg.GROVE_LCD_RGB_CLEAR_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_CLEAR_TEXT = "CLEAR Grove LCD RGB";
Blockly.Msg.GROVE_LCD_RGB_CLEAR_TOOLTIP = "Effaçage de l'écran LCD";
Blockly.Msg.GROVE_LCD_RGB_SCROLL_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_SCROLL_TEXT = "TEXT SCROLLING";
Blockly.Msg.GROVE_LCD_RGB_SCROLL_EFFECT = "Ecrit avec un ";
Blockly.Msg.GROVE_LCD_RGB_SCROLL_EFFECT_FIELDDROPDOWN = [["défilement à gauche", "LEFT"], ["défilement à droite", "RIGHT"], ["défilement automatique", "AUTO"]];
Blockly.Msg.GROVE_LCD_RGB_SCROLL_TOOLTIP = "Choix du sens de défilement du texte";
Blockly.Msg.GROVE_LCD_RGB_SET_CURSOR_TEXT = "SET CURSOR";
Blockly.Msg.GROVE_LCD_RGB_SET_CURSOR_TOOLTIP = "Positionne le curseur aux coordonnées spécifiées";
Blockly.Msg.GROVE_LCD_RGB_SET_CURSOR_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_SET_RGB_TEXT = "SET RGB Backlight";
Blockly.Msg.GROVE_LCD_RGB_SET_RGB_TOOLTIP = "Définit la couleur du rétro-éclairage";
Blockly.Msg.GROVE_LCD_RGB_SET_RGB_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_PRINT_DATA = "PRINT";
Blockly.Msg.GROVE_LCD_RGB_PRINT_TOOLTIP = "Ecrit la valeur numérique, la valeur de la variable ou la chaine de caractères spécifiée";
Blockly.Msg.GROVE_LCD_RGB_PRINT_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_PRINT_INPUTDATA = "DATA"
Blockly.Msg.GROVE_LCD_RGB_WRITE_DATA = "WRITE";
Blockly.Msg.GROVE_LCD_RGB_WRITE_TOOLTIP = "Ecrit le caractère correspondant au code ASCII spécifié";
Blockly.Msg.GROVE_LCD_RGB_WRITE_HELPURL = "http://wiki.seeed.cc/Grove-LCD_RGB_Backlight/";
Blockly.Msg.GROVE_LCD_RGB_WRITE_INPUTDATA = "DATA"
Blockly.Msg.GROVE_LCD_RGB_WRITE_FORMAT_FIELDDROPDOWN = [["0x", "0x"], ["0b", "0b"], ["décimal", "1"],["variable", "2"]];
////////////////////////////Adafruit_RGB_LCD_Shield///////////////////////////////////////////////////////////////////////////
Blockly.Msg.Adafruit_RGB_LCD_Shield_INIT_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_INIT_TEXT = "INIT Adafruit LCD RGB";
Blockly.Msg.Adafruit_RGB_LCD_Shield_INIT_TOOLTIP = "Initialisation du LCD";
Blockly.Msg.Adafruit_RGB_LCD_Shield_CLEAR_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_CLEAR_TEXT = "CLEAR Adafruit LCD RGB";
Blockly.Msg.Adafruit_RGB_LCD_Shield_CLEAR_TOOLTIP = "Effaçage de l'écran LCD";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SCROLL_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SCROLL_TEXT = "TEXT SCROLLING";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SCROLL_EFFECT = "Ecrit avec un ";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SCROLL_EFFECT_FIELDDROPDOWN = [["défilement à gauche", "LEFT"], ["défilement à droite", "RIGHT"], ["défilement automatique", "AUTO"]];
Blockly.Msg.Adafruit_RGB_LCD_Shield_SCROLL_TOOLTIP = "Choix du sens de défilement du texte";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_CURSOR_TEXT = "SET CURSOR";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_CURSOR_TOOLTIP = "Positionne le curseur aux coordonnées spécifiées";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_CURSOR_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_RGB_TEXT = "SET RGB Backlight";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_RGB_COLOUR = "COLOUR"
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_RGB_COLOUR_FIELDDROPDOWN = [["White", "0x07"],["Red", "0x01"], ["Green", "0x02"],["Yellow", "0x03"],["Teal", "0x06"], ["Blue", "0x04"],["Violet", "0x05"]];
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_RGB_TOOLTIP = "Définit la couleur du rétro-éclairage";
Blockly.Msg.Adafruit_RGB_LCD_Shield_SET_RGB_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_PRINT_DATA = "PRINT";
Blockly.Msg.Adafruit_RGB_LCD_Shield_PRINT_TOOLTIP = "Ecrit la valeur numérique, la valeur de la variable ou la chaine de caractères spécifiée";
Blockly.Msg.Adafruit_RGB_LCD_Shield_PRINT_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_PRINT_INPUTDATA = "DATA"
Blockly.Msg.Adafruit_RGB_LCD_Shield_WRITE_DATA = "WRITE";
Blockly.Msg.Adafruit_RGB_LCD_Shield_WRITE_TOOLTIP = "Ecrit le caractère correspondant au code ASCII spécifié";
Blockly.Msg.Adafruit_RGB_LCD_Shield_WRITE_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
Blockly.Msg.Adafruit_RGB_LCD_Shield_WRITE_INPUTDATA = "DATA"
Blockly.Msg.Adafruit_RGB_LCD_Shield_WRITE_FORMAT_FIELDDROPDOWN = [["0x", "0x"], ["0b", "0b"], ["décimal", "1"],["variable", "2"]];
Blockly.Msg.Adafruit_RGB_LCD_Shield_READ_button_TEXT = "READ BUTTON";
Blockly.Msg.Adafruit_RGB_LCD_Shield_READ_button_TOOLTIP = "UP = 0x08 - DOWN = 0x04 - LEFT = 0x10 - RIGHT = 0x02 - SELECT = 0x01";
Blockly.Msg.Adafruit_RGB_LCD_Shield_READ_button_HELPURL = "https://learn.adafruit.com/rgb-lcd-shield";
////////////////////////////LCD_4BITS///////////////////////////////////////////////////////////////////////////
Blockly.Msg.LCD4BITS_INIT_HELPURL = "https://www.arduino.cc/en/Reference/LiquidCrystal";
Blockly.Msg.LCD4BITS_INIT_TEXT = "INIT LCD 4 Bits";
Blockly.Msg.LCD4BITS_INIT_TOOLTIP = "Initialisation du LCD";
Blockly.Msg.Lcd4bits_CLEAR_TEXT = "CLEAR LCD 4 Bits";
Blockly.Msg.Lcd4bits_CLEAR_TOOLTIP = "Effaçage de l'écran LCD";
Blockly.Msg.Lcd4bits_SET_CURSOR_TEXT = "SET CURSOR";
Blockly.Msg.Lcd4bits_SET_CURSOR_TOOLTIP = "Positionne le curseur aux coordonnées spécifiées";
Blockly.Msg.Lcd4bits_PRINT_DATA = "PRINT";
Blockly.Msg.Lcd4bits_PRINT_INPUTDATA = "DATA";
Blockly.Msg.Lcd4bits_PRINT_TOOLTIP = "Ecrit la valeur numérique, la valeur de la variable ou la chaine de caractères spécifiée";
Blockly.Msg.Lcd4bits_WRITE_DATA = "WRITE";
Blockly.Msg.Lcd4bits_WRITE_TOOLTIP = "Ecrit le caractère correspondant au code ASCII spécifié";
Blockly.Msg.Lcd4bits_WRITE_INPUTDATA = "DATA"
Blockly.Msg.Lcd4bits_WRITE_FORMAT_FIELDDROPDOWN = [["0x", "0x"], ["0b", "0b"], ["décimal", "1"]];
//////////////////////////////////////DHTxx////////////////////////////////////////////////////////////////////
Blockly.Msg.DHTxx_INIT_TEXT = "INIT ";
Blockly.Msg.DHTxx_INIT_TEXT_1 = "Capteur connecté";
Blockly.Msg.DHTxx_INIT_TEXT_2 = "sur la broche N°";
Blockly.Msg.DHTxx_INIT_TOOLTIP = "Choix entre le DHT11 ou le DHT22 et de la broche de l'Arduino sur laquelle est connecté le capteur.";
Blockly.Msg.DHTxx_INIT_HELPURL = "https://www.carnetdumaker.net/articles/utiliser-un-capteur-de-temperature-et-dhumidite-dht11-dht22-avec-une-carte-arduino-genuino/";
Blockly.Msg.DHTxx_INIT_SENSOR_CHOICE = [["DHT11","DHT11_Sensor"], ["DHT22","DHT22_Sensor"]];
Blockly.Msg.DHTxx_READ_TEXT = "Réponse du DHTxx";
Blockly.Msg.DHTxx_READ_TOOLTIP = "Lit les 5 octets de la trame du DHTxx. Renvoie 0 en cas de succès et 1 en cas de timeout. Les 5 octets sont stockés dans un tableau de 5 éléments : data[0] à data[4]";
Blockly.Msg.DHTxx_READ_BYTES_TEXT = "Valeur de l'octet N°";
Blockly.Msg.DHTxx_READ_BYTES_CHOICE = [["1","0"], ["2","1"], ["3","2"], ["4","3"], ["5","4"]];
Blockly.Msg.DHTxx_READ_BYTES_TOOLTIP = "Renvoie la valeur de l'octet spécifié";
//////////////////////////////////////SHT1x////////////////////////////////////////////////////
Blockly.Msg.SHT1x_INIT_TITLE = "SHT1x INIT";
Blockly.Msg.SHT1x_INIT_TEXT1 = "PIN DATA";
Blockly.Msg.SHT1x_INIT_TEXT2 = "PIN SCK";
Blockly.Msg.SHT1x_INIT_TOOLTIP = "Choix des broches DATA et SCK pour communiquer avec le capteur";
Blockly.Msg.SHT1x_START_TITLE = "START";
Blockly.Msg.SHT1x_START_TOOLTIP = "Génère une séquence de START pour commencer la transmission";
Blockly.Msg.SHT1x_SEND_COMMAND_TITLE = "SEND_COMMAND";
Blockly.Msg.SHT1x_SEND_COMMAND_TEXT = "COMMAND";
Blockly.Msg.SHT1x_SEND_COMMAND_TOOLTIP = "Envoie la commande pour une mesure de température ou d'humidité";
Blockly.Msg.SHT1x_EOC_TITLE = "Conversion en cours";
Blockly.Msg.SHT1x_EOC_TOOLTIP = "Data = 1 : Conversion en cours. Data = 0 : Fin de conversion";
Blockly.Msg.SHT1x_GETBYTE_TITLE = "READ BYTE";
Blockly.Msg.SHT1x_GETBYTE_TOOLTIP = "Lit un octet issu du capteur";
Blockly.Msg.SHT1x_SEND_ACK_TITLE = "SEND ACK";
Blockly.Msg.SHT1x_SEND_ACK_TOOLTIP = "Envoie un ACK avant la lecture du prochain octet";
Blockly.Msg.SHT1x_SKIP_ACK_TITLE = "SKIP ACK (End of transmission)";
Blockly.Msg.SHT1x_SKIP_ACK_TOOLTIP = "ACK = 1 pour mettre fin à la transmission";
//////////////////////////////////////BQ27441////////////////////////////////////////////////////////////////////
Blockly.Msg.BQ27441_INIT_TEXT = "BQ27441 INIT ";
Blockly.Msg.BQ27441_INIT_TOOLTIP = "Inclusion de la bibliothèque <SparkFunBQ27441.h>";
Blockly.Msg.BQ27441_INIT_HELPURL = "https://learn.sparkfun.com/tutorials/battery-babysitter-hookup-guide/all";
Blockly.Msg.BQ27441_SETUP_TEXT = "BQ27441 Connecté ?";
Blockly.Msg.BQ27441_SETUP_TOOLTIP = "Renvoie 1 si la communication avec le BQ27441 s'est bien établie. La batterie doit être connectée à la carte ! ";
Blockly.Msg.BQ27441_SET_CAPACITY_TEXT1 = "Régler la capacité à "
Blockly.Msg.BQ27441_SET_CAPACITY_TEXT2 = "mAh"
Blockly.Msg.BQ27441_SET_CAPACITY_TOOLTIP = "Renseigner le bloc avec la capacité de la batterie en mAh"
//////////////////////////////////////L298////////////////////////////////////////////////////////////////////
Blockly.Msg.MOTORS_L298N_MOTOR_TITLE = "L298N contrôleur moteur";
Blockly.Msg.MOTORS_L298N_MOTOR_INIT_TITLE = "L298N Contrôleur Moteur Initialisation";
Blockly.Msg.MOTORS_L298N_ID = "Identifiant"
Blockly.Msg.MOTORS_L298N_MOTOR_SPEED = "Vitesse";
Blockly.Msg.MOTORS_L298N_MOTOR_PIN_IN1 = "Broche IN1 (direction)";
Blockly.Msg.MOTORS_L298N_MOTOR_PIN_IN2 = "Broche IN2 (direction)";
Blockly.Msg.MOTORS_L298N_MOTOR_PIN_EN = "Broche EN (pwm)";
Blockly.Msg.MOTORS_L298N_STOP = "arrêt";
Blockly.Msg.MOTORS_L298N_FORWARD = "avance";
Blockly.Msg.MOTORS_L298N_BACKWARD = "recul";
Blockly.Msg.MOTORS_L298N_BRAKE = "frein";
Blockly.Msg.MOTORS_L298N_INIT_TOOLTIP = "L298N, bloc d'initialisation (1 par moteur)";
Blockly.Msg.MOTORS_L298N_TOOLTIP = "Bloc L298N, utiliser le même id que dans le bloc d'initialisation";
//////////////////////////////////////MOTEUR CC////////////////////////////////////////////////////////////////////////
Blockly.Msg.MOTORCC_SETUP_TITLE = "AdaFruit DC Initialisation d'un moteur CC";
Blockly.Msg.MOTORCC_SETUP_NUMPORT = "Numéro du 'PORT'";
Blockly.Msg.MOTORCC_SETUP_NUMPORT_FIELDDROPDOWN = [["Port 1","1"], ["Port 2","2"],["Port 3","3"], ["Port 4","4"]];
Blockly.Msg.MOTORCC_SETUP_FREQUENCY = "Fréquence de la MLI";
Blockly.Msg.MOTORCC_SETUP_FREQUENCY_FIELDDROPDOWN = [["64 kHz","64"], ["8 kHz","8"],["2 kHz","2"], ["1 kHz","1"]];
Blockly.Msg.MOTORCC_SETUP_TOOLTIP = "Initilise un moteur CC avec le numero du 'PORT' sur lequel le connecter ainsi que la fréquence de la MLI ";
Blockly.Msg.MOTORCC_SETSPEED_TITLE = "AdaFruit DC Réglage de la Vitesse";
Blockly.Msg.MOTORCC_SETSPEED_SPEED = "Vitesse (0-255)";
Blockly.Msg.MOTORCC_SETSPEED_TOOLTIP = "Reglage de la vitesse de rotation du moteur";
Blockly.Msg.MOTORCC_RUN_TITLE = "AdaFruit DC Réglage du mode";
Blockly.Msg.MOTORCC_RUN_CMD = "Mode";
Blockly.Msg.MOTORCC_RUN_FIELDDROPDOWN = [["En Avant","FORWARD"], ["En Arrière","BACKWARD"],["Relachement","RELEASE"]];
Blockly.Msg.MOTORCC_RUN_TOOLTIP = "Régle le mode du moteur: le sens ou le relachement (pas de freinage)";
//////////////////////////////////////StepperV2////////////////////////////////////////////////////////////////////////////////////////////////////////
Blockly.Msg.STEPPER2_SETUP_TITLE = "ULN2003 PAP Initialisation d'un moteur PAP";
Blockly.Msg.STEPPER2_SETUP_NBPAS = "Nombre de Pas";
Blockly.Msg.STEPPER2_SETUP_PIN1 = "Broche INA";
Blockly.Msg.STEPPER2_SETUP_PIN2 = "Broche INB";
Blockly.Msg.STEPPER2_SETUP_PIN3 = "Broche INC";
Blockly.Msg.STEPPER2_SETUP_PIN4 = "Broche IND";
Blockly.Msg.STEPPER2_SETUP_TOOLTIP = "Initilise un moteur pas à pas avec le nombre de pas et les pins sur lesquelles on envoies les commandes"
Blockly.Msg.STEPPER2_SETSPEED_TITLE = "ULN2003 PAP Vitesse (RPM) ";
Blockly.Msg.STEPPER2_SETSPEED_SPEED = "Vitesse";
Blockly.Msg.STEPPER2_SETSPEED_TOOLTIP = "Reglage de la vitesse de rotation du moteur";
Blockly.Msg.STEPPER2_STEP_TITLE = "ULN2003 PAP Rotation";
Blockly.Msg.STEPPER2_STEP_STEP = "Nombre de pas (+/-)";
Blockly.Msg.STEPPER2_STEP_TOOLTIP = "Indique le nombre de pas à parcourir (positif ou négatif)";
//////////////////////////////////////StepperV22////////////////////////////////////////////////////////////////////////
Blockly.Msg.STEPPER22_SETUP_TITLE = "AdaFruit PAP Initialisation d'un moteur PAP";
Blockly.Msg.STEPPER22_SETUP_NBPAS = "Nombre de Pas";
Blockly.Msg.STEPPER22_SETUP_NUMPORT = "Numéro du 'PORT'";
Blockly.Msg.STEPPER22_SETUP_FIELDDROPDOWN = [["Port 1 (canaux 1 & 2)","1"], ["Port 2 (canaux 3 & 4)","2"]];
Blockly.Msg.STEPPER22_SETUP_TOOLTIP = "Initilise un moteur pas à pas avec le nombre de pas et le numero du 'PORT' sur lequel le connecter ";
Blockly.Msg.STEPPER22_SETSPEED_TITLE = "AdaFruit PAP Vitesse (RPM) ";
Blockly.Msg.STEPPER22_SETSPEED_SPEED = "Vitesse";
Blockly.Msg.STEPPER22_SETSPEED_TOOLTIP = "Reglage de la vitesse de rotation du moteur";
Blockly.Msg.STEPPER22_STEP_TITLE = "AdaFruit PAP Rotation";
Blockly.Msg.STEPPER22_STEP_STEP = "Nombre de pas";
Blockly.Msg.STEPPER22_STEP_DIRECTION = "Direction";
Blockly.Msg.STEPPER22_STEP_DIRECTION_FIELDDROPDOWN = [["Avant","FORWARD"], ["Arrière","BACKWARD"]];
Blockly.Msg.STEPPER22_STEP_STYLE = "Mode";
Blockly.Msg.STEPPER22_STEP_STYLE_FIELDDROPDOWN = [["pas complet","SINGLE"], ["pas complet fort couple","DOUBLE"], ["demi-pas","INTERLEAVE"], ["micro-pas","MICROSTEP"]];
Blockly.Msg.STEPPER22_STEP_TOOLTIP = "Indique le nombre de pas à parcourir, le sens et le mode";
Blockly.Msg.STEPPER22_ONESTEP_TITLE = "AdaFruit PAP Rotation 1 pas";
Blockly.Msg.STEPPER22_ONESTEP_TOOLTIP = "Avance d'un pas et précise le sens et le mode";
Blockly.Msg.STEPPER22_RELEASE_TITLE = "AdaFruit PAP Relachement du moteur";
Blockly.Msg.STEPPER22_RELEASE_TOOLTIP = "Relache le couple sur le moteur, permet la réduction de l'échauffement et la consommation de courant";
//////////////////////////////////////I2C HARDWARE////////////////////////////////////////////////////////////////////////
Blockly.Msg.I2C_INIT_HW_TITRE = "I2C_INIT";
Blockly.Msg.I2C_INIT_HW_TOOLTIP = "Initialisation du bus I2C par le maitre";
Blockly.Msg.I2C_INIT_HW_HELPURL = "";
Blockly.Msg.I2C_STOP_HW_TITRE = "I2C_STOP";
Blockly.Msg.I2C_STOP_HW_TOOLTIP = "Le maitre libère le bus";
Blockly.Msg.I2C_STOP_HW_HELPURL = "";
Blockly.Msg.I2C_RESTART_HW_TITRE = "I2C_RESTART";
Blockly.Msg.I2C_RESTART_HW_TOOLTIP = "Le maitre garde la main sur le bus";
Blockly.Msg.I2C_RESTART_HW_HELPURL = "";
Blockly.Msg.I2C_WRITE_HW_TEXT = "I2C_WRITE";
Blockly.Msg.I2C_WRITE_HW_DATA = "Data :";
Blockly.Msg.I2C_WRITE_HW_FIELDDROPDOWN = [["0x","hex"], ["0b","bin"],["Décimal","dec"],["Variable","var"]];
Blockly.Msg.I2C_WRITE_HW_TOOLTIP = "Le maitre écrit un octet de donnée";
Blockly.Msg.I2C_WRITE_HW_HELPURL = "";
Blockly.Msg.I2C_START_HW_TEXT = "I2C_START";
Blockly.Msg.I2C_START_HW_DATA = "Slave Address :";
Blockly.Msg.I2C_START_HW_FIELDDROPDOWN = [["0x","0x"], ["0b","0b"],["Décimal",""]];
Blockly.Msg.I2C_START_HW_TOOLTIP = "Le maitre initie une transmission avec l'esclave identifié par l'adresse";
Blockly.Msg.I2C_START_HW_HELPURL = "";
Blockly.Msg.I2C_REQUEST_HW_TEXT = "I2C_REQUEST";
Blockly.Msg.I2C_REQUEST_HW_DATA = "Slave Address :";
Blockly.Msg.I2C_REQUEST_HW_FIELDDROPDOWN = [["0x","0x"], ["0b",,"0b"],["Décimal",""]];
Blockly.Msg.I2C_REQUEST_HW_NB_BYTES = "Number of Bytes to read :";
Blockly.Msg.I2C_REQUEST_HW_TOOLTIP = "Le maitre enregistre dans une mémoire temporaire (buffer) le nombre d'octets demandé à l'esclave identifié par l'adresse";
Blockly.Msg.I2C_REQUEST_HW_HELPURL = "";
Blockly.Msg.I2C_AVAILABLE_HW_TITRE = "I2C_DATA_AVAILABLE";
Blockly.Msg.I2C_AVAILABLE_HW_TOOLTIP = "Renvoie le nombre de données qui reste à lire dans le buffer";
Blockly.Msg.I2C_AVAILABLE_HW_HELPURL = "";
Blockly.Msg.I2C_DATA_HW_TITRE = "I2C_DATA";
Blockly.Msg.I2C_DATA_HW_TOOLTIP = "Lit une donnée du buffer";
Blockly.Msg.I2C_DATA_HW_HELPURL = "";
//////////////////////////////////////Implementation I2CSoftwareLibrary   http://playground.arduino.cc/Main/SoftwareI2CLibrary //////////////////////////////////////
Blockly.Msg.I2C_INIT_TEXT = "SOFT I2C_INIT";
Blockly.Msg.I2C_INIT_PIN_SCL = "PIN_SCL";
Blockly.Msg.I2C_INIT_PORT_SCL = "PORT_SCL";
Blockly.Msg.I2C_INIT_FIELDDROPDOWN_SCL = [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"], ["E", "E"]];
Blockly.Msg.I2C_INIT_PIN_SDA = "PIN_SDA";
Blockly.Msg.I2C_INIT_PORT_SDA = "PORT_SDA";
Blockly.Msg.I2C_INIT_FIELDDROPDOWN_SDA = [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"], ["E", "E"]];
Blockly.Msg.I2C_INIT_TOOLTIP = "configure les broches SDA et SCL";
Blockly.Msg.I2C_INIT_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";     
Blockly.Msg.I2C_START_TEXT = "SOFT_I2C_START";
Blockly.Msg.I2C_START_ADRESS = "adresse";
Blockly.Msg.I2C_START_RW = "R/W";
Blockly.Msg.I2C_START_TOOLTIP = "envoi un Start + adresse de l'esclave + R/W";
Blockly.Msg.I2C_START_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";
Blockly.Msg.I2C_START_FIELDDROPDOWN = [["W (écriture)", "I2C_WRITE"], ["R (lecture)", "I2C_READ"]];
Blockly.Msg.I2C_RESTART_TEXT = "SOFT_I2C_RESTART";
Blockly.Msg.I2C_RESTART_ADRESS = "adresse";
Blockly.Msg.I2C_RESTART_RW = "R/W";
Blockly.Msg.I2C_RESTART_FIELDDROPDOWN = [["W (écriture)", "I2C_WRITE"], ["R (lecture)", "I2C_READ"]];
Blockly.Msg.I2C_RESTART_TOOLTIP = "envoi un REStart + adresse de l'esclave + R/W";
Blockly.Msg.I2C_RESTART_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";
Blockly.Msg.I2C_STOP_TEXT = "SOFT_I2C_STOP";
Blockly.Msg.I2C_STOP_TOOLTIP = "envoi un Stop et donc libère le bus";
Blockly.Msg.I2C_STOP_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";
Blockly.Msg.I2C_WRITE_TEXT = "SOFT_I2C_WRITE";
Blockly.Msg.I2C_WRITE_DATA = "data";
Blockly.Msg.I2C_WRITE_TOOLTIP = "écrit un octet de donnée";
Blockly.Msg.I2C_WRITE_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";
Blockly.Msg.I2C_READ_TEXT = "SOFT_I2C_READ";
Blockly.Msg.I2C_READ_LAST = "Last? : ";
Blockly.Msg.I2C_READ_FIELDDROPDOWN = [["non","false"], ["oui","true"]];
Blockly.Msg.I2C_READ_TOOLTIP = "Reçoit un octet de donnée avec l'envoi d'un paramètre last = oui pour le dernier";
Blockly.Msg.I2C_READ_HELPURL = "http://playground.arduino.cc/Main/SoftwareI2CLibrary";
Blockly.Msg.I2C_SCAN_TEXT = "lister les périphériques I²C dans la console série";
Blockly.Msg.I2C_SCAN_TOOLTIP = "Scanne les périphériques et retourne les adresses dans la console à régler sur 115200 bauds";
Blockly.Msg.I2C_SCAN_HELPURL = "http://info.technologiescollege.fr/wiki/doku.php/fr/arduino/lcd-i2c";
////////////////////////////////////////////////////////////////////ETHERNET //////////////////////////////////////////////////////////////////////////////////////////////////
Blockly.Msg.ETHERNET_VERSION_FIELDDROPDOWN = [["Hardware",""],["Simulation","PROTEUS"]];
Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";
Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Requête client en cours";
Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is, the amount of data that has been written to the client by the server it is connected to).";
Blockly.Msg.ETHERNET_BEGIN_DHCP_CLIENT_TITLE = "Begin (DHCP) Client";
Blockly.Msg.ETHERNET_BEGIN_DHCP_SERVER_TITLE = "Begin (DHCP) Server";
Blockly.Msg.ETHERNET_BEGIN_STATICIP_SERVER_TITLE = "Begin (StaticIP) Server";
Blockly.Msg.ETHERNET_BEGIN_STATICIP_CLIENT_TITLE = "Begin (StaticIP) Client";
Blockly.Msg.ETHERNET_STATICIP_IP = "IP fixe de la carte";
Blockly.Msg.ETHERNET_STATICIP_DNS = "DNS local";
Blockly.Msg.ETHERNET_STATICIP_GATEWAY = "Passerelle";
Blockly.Msg.ETHERNET_STATICIP_SUBNET = "Masque sous-réseau";
Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup, the Ethernet shield will automatically obtain an IP address.";
Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";
Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin (DHCP) Client";
Blockly.Msg.ETHERNET_BEGIN_TOOLTIP = "Initializes the ethernet library and network settings.";
Blockly.Msg.ETHERNET_CLIENT_FOR_SERVER_TITLE = "Requête Client"; 
Blockly.Msg.ETHERNET_CLIENT_FOR_SERVER_TOOLTIP = "Un client envoie une requete"; 
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";
Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data, followed by a carriage return and newline, to the server a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";
Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";
Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";
Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits, each an ASCII character (e.g. the number 123 is sent as the three characters '1', '2', '3').";
Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";
Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Requête Client";
Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected, false if not.";
Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";
Blockly.Msg.ETHERNET_CONNECT_TITLE = "Client.Connect";
Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";
Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";
Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";
Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";
Blockly.Msg.ETHERNET_GET_REQUEST_URL = "URL";
Blockly.Msg.ETHERNET_GET_REQUEST_SERVER = "serveur hôte";
Blockly.Msg.ETHERNET_HTML_SEND_TITLE = "SEND HTML PAGE";
Blockly.Msg.ETHERNET_HTML_SEND_HTMLJS = "page html/JS";
Blockly.Msg.ETHERNET_HEADER_SEND_TITLE = "SEND HEADER HTTP/1.1";
Blockly.Msg.ETHERNET_HEADER_SEND_FIELDDROPDOWN = [["text/html", "text"], ["image/png", "png"]];
Blockly.Msg.ETHERNET_HEADER_SEND_PAGE_TITLE = "Envoyer Réponse Part :";
Blockly.Msg.ETHERNET_HEADER_SEND_PAGE_TOOLTIP = "Envoyer une page html inclue dans un fichier HTML.h";
Blockly.Msg.ETHERNET_HEADER_SEND_FIELDDROPDOWN2 = [["OK", "200"], ["Pas de contenu", "204"], ["Erreur", "404"]];
Blockly.Msg.ETHERNET_PARSER_INIT_TITLE = "Initialisation Analyseur de requête";
Blockly.Msg.ETHERNET_PARSER_PARSE_TITLE = "";
Blockly.Msg.ETHERNET_PARSER_PARSE_INPUT = "Analyse de la requête";//"Requête reçue";
Blockly.Msg.ETHERNET_PARSER_END_TITLE = "Fin de requête ?";
Blockly.Msg.ETHERNET_PARSER_COUNT_TITLE = "nombre de paramètres détectés ?";
Blockly.Msg.ETHERNET_PARSER_GETMYPARAM_TITLE = "recupère le contenu du paramètre : ";
Blockly.Msg.ETHERNET_PARSER_GETMYPARAM_PARAM = "nom du paramètre: ";
Blockly.Msg.ETHERNET_PARSER_PURGE_TITLE = "Fin de l'analyse";
Blockly.Msg.ETHERNET_ATTENTE_CLIENT_TITLE = "Attente requête Client";
Blockly.Msg.ETHERNET_PARSERV2_CREATION_TITLE = "Initialisation Analyseur de requête";
Blockly.Msg.ETHERNET_PARSERV2_CREATION_TOOLTIP = "Créer un objet Analyseur";
Blockly.Msg.ETHERNET_PARSERV2_CREATION_VERSION_FIELDDROPDOWN = [["Hardware","HW"],["Simulation","Simu"]];
Blockly.Msg.ETHERNET_PARSERV2_LECTURE_TITLE = "Lecture de la requête";
Blockly.Msg.ETHERNET_PARSERV2_LECTURE_FLUX = "flux à analyser";
Blockly.Msg.ETHERNET_PARSERV2_LECTURE_TOOLTIP = "Lecture et stockage du flux utile d'un POST ou d'un GET";
Blockly.Msg.ETHERNET_PARSERV2_PARSING_TITLE = "Nombre de paramètres détectés";
Blockly.Msg.ETHERNET_PARSERV2_PARSING_TOOLTIP = "Renvois le nombre de paramètres détectés";
Blockly.Msg.ETHERNET_PARSERV2_GETNAME_TITLE = "Nom du paramètre";
Blockly.Msg.ETHERNET_PARSERV2_GETNAME_TOOLTIP = "Renvoie le nom d'un paramètre ou 'inconnu'";
Blockly.Msg.ETHERNET_PARSERV2_GETNAME_PARAM = "N° :";
Blockly.Msg.ETHERNET_PARSERV2_GETVALUE_TITLE = "Valeur du paramètre";
Blockly.Msg.ETHERNET_PARSERV2_GETVALUE_TOOLTIP = "Renvoie la valeur d'un paramètre";
Blockly.Msg.ETHERNET_PARSERV2_GETVALUE_PARAM = "Nom : ";
Blockly.Msg.ETHERNET_PARSERV2_FREE_TITLE = "Fin de l'analyse de la requête (obligatoire)";
Blockly.Msg.ETHERNET_PARSERV2_FREE_TOOLTIP = "RaZ du Analyseur";
Blockly.Msg.ETHERNET_PARSERV2_ATOI_TITLE = "Conversion Texte --> Nombre Entier";
Blockly.Msg.ETHERNET_PARSERV2_ATOI_PARAM = "Texte";
Blockly.Msg.ETHERNET_PARSERV2_ATOI_TOOLTIP = "Conversion Ascii --> Int";
Blockly.Msg.ETHERNET_PARSERV2_ATOF_TITLE = "Conversion Texte --> Nombre à virgule";
Blockly.Msg.ETHERNET_PARSERV2_ATOF_PARAM = "Texte";
Blockly.Msg.ETHERNET_PARSERV2_ATOF_TOOLTIP = "Conversion Ascii --> Float";
Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";
Blockly.Msg.ETHERNET_LOCALIP_TITLE = "adresse IP locale";
Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Returns the IP address of the Ethernet shield";
Blockly.Msg.ETHERNET_MAC_ADDRESS = "MAC Address";
Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";
Blockly.Msg.ETHERNET_PORT = "Port";
Blockly.Msg.ETHERNET_POST_DATA = "Data";
Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";
Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";
Blockly.Msg.ETHERNET_POST_REQUEST_URL = "URL";
Blockly.Msg.ETHERNET_POST_REQUEST_SERVER = "serveur hôte";
Blockly.Msg.ETHERNET_POST_REQUEST_DATA ="Données";
Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";
Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";
Blockly.Msg.ETHERNET_READ_TITLE = "Texte de la requête en cours";
Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";
Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";
Blockly.Msg.ETHERNET_STOP_TITLE = "Fermeture IPSocket";
Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Déconnexion du client";
Blockly.Msg.ETHERNET_VERSION_1 = "Ethernet";
Blockly.Msg.ETHERNET_VERSION_2 = "Ethernet2";
Blockly.Msg.ETHERNET_VERSION_V2 = "Ethernet_v2";
//////////////////////////////////////////////// ETHERNET WIFI ESP8266 ///////////////////////////////////////////////
Blockly.Msg.ETHERNET_WIFI_BEGIN_SERVER_HELPURL = "https://www.arduino.cc/en/Reference/WiFi";
Blockly.Msg.ETHERNET_WIFI_BEGIN_SERVER_TITLE = "Begin (DHCP) WIFI Server"; 
Blockly.Msg.ETHERNET_WIFI_SSID = "SSID";
Blockly.Msg.ETHERNET_WIFI_PASS = "PASS";
Blockly.Msg.ETHERNET_WIFI_BEGIN_SERVER_TOOLTIP = "initialisation de la liaison WIFI";
Blockly.Msg.ETHERNET_CLIENT_FOR_WIFI_SERVER_TITLE = "Requête Client sur serveur WIFI";
Blockly.Msg.ETHERNET_WIFI_LOCALIP_TITLE = "adresse IP locale (WIFI)";
Blockly.Msg.ETHERNET_WIFI_LOCALIP_TOOLTIP = "Retourne l'IP locale";
//////////////////////////////////////////////// EEPROM + SD ///////////////////////////////////////////////
Blockly.Msg.STORAGE_WRITE_SD_FILE = "Carte SD, enregistrer sous ";
Blockly.Msg.STORAGE_SD_DATA = "la donnée";
Blockly.Msg.STORAGE_SD_NEWLINE = "avec un saut de ligne ?";
Blockly.Msg.STORAGE_EEPROM_WRITE_LONG = "EEPROM écrire à l'adresse";
Blockly.Msg.STORAGE_DATA_LONG = "la donnée (long int)";
Blockly.Msg.STORAGE_EEPROM_READ_LONG = "EEPROM - donnée (long) lue à l'adresse";
Blockly.Msg.STORAGE_EEPROM_WRITE_BYTE = "EEPROM écrire à l'adresse";
Blockly.Msg.STORAGE_DATA_BYTE = "la donnée (byte)";
Blockly.Msg.STORAGE_EEPROM_READ_BYTE = "EEPROM - donnée (byte) lue à l'adresse";